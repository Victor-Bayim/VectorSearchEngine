项目详细模块划分说明
1. 内存管理模块（MemoryPool）
1.1 职责
高效内存分配与释放： 预先分配一块连续内存，并将其划分为固定大小的内存块，以便快速分配和回收。

降低内存碎片化： 保证所有向量数据在内存中以连续方式存储，提高缓存命中率。

错误检测与调试： 检测非法释放、重复释放或超出内存池范围的指针操作。

1.2 主要接口
构造函数：初始化内存池，设置每个块大小（通常为向量的字节大小）和总块数。

allocate()：遍历内存池，返回第一个空闲块的指针；若没有可用块，则抛出异常。

*deallocate(void ptr)**：根据传入的指针计算对应内存块索引，并将该块标记为未使用，若非法释放则抛出异常。

1.3 内部实现
内存连续分配： 通过 new char[blockSize * blockCount] 分配连续内存。

状态跟踪： 使用 std::vector<bool> 或类似数据结构记录每个内存块的使用状态。

异常处理： 在分配或释放过程中进行边界检查和错误处理。

2. 数据存储模块（VectorStorage）
2.1 职责
向量数据管理： 提供向量数据的添加、更新、删除和查询功能。

依赖内存池： 利用 MemoryPool 实现向量数据的内存分配，确保每个向量数据存储在连续内存块中。

数据持久化： 提供简单的二进制文件保存与加载接口，方便数据的离线备份与恢复。

2.2 主要接口
构造函数： 接受向量维度和最大存储容量，初始化内存池和内部数据结构。

addVector(const std::vector<float>& vec)：将输入向量拷贝到内存池中，并记录其在内部数组中的位置，返回存储索引。

getVector(std::size_t index)：返回指定索引处向量数据的指针，以便后续进行计算。

updateVector(std::size_t index, const std::vector<float>& vec)：更新已存向量数据。

deleteVector(std::size_t index)：删除指定向量，并释放对应内存块（目前未做数组紧缩，后续可扩展）。

saveToFile/loadFromFile：实现向量数据的持久化存储和恢复。

2.3 内部实现
数据记录： 利用 std::vector<void*> dataPointers_ 存储每个向量数据在内存池中的地址。

容量管理： 通过变量记录当前向量数量，并与总容量进行对比，防止超出预设容量。

错误检测： 在添加、更新、删除操作中对维度、索引边界进行检查，确保数据一致性。

3. 向量计算模块（VectorMath）
3.1 职责
向量相似度计算： 提供常见的向量计算函数，包括余弦相似度、欧氏距离、内积等。

性能优化预留： 为后续利用 SIMD 指令或并行计算（如 OpenMP）优化高维向量运算预留接口。

数值稳定性： 考虑数值计算的精度和稳定性问题，必要时提供归一化、容错机制。

3.2 主要接口
cosineSimilarity(const float vec1, const float vec2, std::size_t dim)**：计算两个向量间的余弦相似度。

euclideanDistance(const float vec1, const float vec2, std::size_t dim)**：计算欧氏距离。

dotProduct(const float vec1, const float vec2, std::size_t dim)**：计算向量内积，可作为余弦计算的基础。

3.3 内部实现
逐元素计算： 使用循环进行元素乘法累加，考虑使用编译器自动向量化。

SIMD扩展接口： 提供函数模板或接口，后续可以通过 Intel Intrinsics 实现低级优化。

错误检测： 检查传入向量指针非空、维度合理等基本前提。

4. 索引与检索模块（VectorIndex）
4.1 职责
向量检索： 提供一个初步的暴力搜索实现，遍历所有向量计算相似度，并返回匹配结果。

接口预留： 预留接口方便后续扩展为 KD 树、HNSW、IVF 等更高效的近似最近邻（ANN）算法。

结果排序与筛选： 支持返回最相似的若干个向量（Top-K 检索），并提供阈值筛选等扩展功能。

4.2 主要接口
*search(const float queryVec, std::size_t topK)**：接收查询向量，利用 VectorMath 计算相似度，并返回最匹配的 Top-K 结果（返回索引及相似度值）。

setIndexParameters(...): 预留参数设置接口，为后续索引算法调优提供入口。

4.3 内部实现
暴力搜索算法： 遍历 VectorStorage 中所有向量，调用 VectorMath 接口计算相似度。

数据访问： 通过 VectorStorage 接口获取向量数据，保证模块间解耦。

结果排序： 利用 STL 排序函数对计算出的相似度结果排序，并返回前 K 个。

5. 接口与服务模块（API/CLI Interface）
5.1 职责
用户交互： 提供便捷的命令行工具或 RESTful API，支持向量数据上传、查询、删除等操作。

日志与监控： 集成日志记录（例如通过 spdlog），实时记录系统运行状态、错误信息和调试日志。

调度与管理： 提供简单的调度接口，使系统能够响应用户命令，并将数据传递给后端存储与检索模块。

5.2 主要接口
CLI 主程序： 提供命令行参数解析，调用 VectorStorage、VectorIndex 等模块接口完成操作。

RESTful API（可选）： 后续可以扩展为 HTTP 服务，利用轻量级 HTTP 框架（如 Pistache、Crow）构建 RESTful 接口。

日志记录接口： 封装日志库调用，统一管理日志级别和输出格式。

5.3 内部实现
命令解析： 使用 C++ 标准库或者第三方库（如 CLI11）解析用户输入命令。

模块调用： 根据不同命令调用 VectorStorage、VectorIndex 或 VectorMath 模块，返回操作结果给用户。

错误反馈： 捕获异常并记录日志，同时将错误信息友好反馈给终端用户或 API 调用方。

6. 测试模块（Unit & Integration Tests）
6.1 职责
单元测试： 针对每个模块（MemoryPool、VectorStorage、VectorMath、VectorIndex）编写单元测试，验证接口正确性和边界情况处理。

集成测试： 通过模拟完整数据流（从数据存储到检索）进行集成测试，确保模块之间协同工作时无缝对接。

自动化测试： 集成测试框架（如 Catch2、Google Test），方便自动化测试和持续集成。

6.2 测试内容
MemoryPool 测试： 分配、释放、重复释放、越界释放等异常情况。

VectorStorage 测试： 添加、查询、更新、删除向量数据，以及持久化保存和加载的正确性。

VectorMath 测试： 不同向量间的相似度计算结果对比验证、数值精度测试。

VectorIndex 测试： 检索结果是否准确、Top-K 结果排序正确、异常输入处理。

7. 辅助工具模块（Utilities）
7.1 职责
日志管理： 封装日志库的配置与调用，统一日志输出，便于调试和运维监控。

配置管理： 提供简单的配置文件解析接口（如 JSON、INI 格式），为后续参数调优和环境适配做准备。

错误处理与调试辅助： 提供断言、异常信息扩展和调试工具，帮助开发者快速定位问题。

模块间交互与整体流程
数据流入：
用户通过 API/CLI 上传向量数据，接口模块调用 VectorStorage 模块。VectorStorage 利用 MemoryPool 分配内存，并存储向量数据，同时记录数据在内存池中的位置。

向量计算：
检索时，接口模块接收到查询请求，调用 VectorIndex 模块。VectorIndex 从 VectorStorage 获取所有向量数据，通过 VectorMath 模块计算查询向量与存储向量之间的相似度。

检索结果返回：
VectorIndex 对相似度结果排序后返回 Top-K 结果，接口模块将结果反馈给用户，同时记录日志。

数据更新与持久化：
数据的更新、删除和持久化操作均通过 VectorStorage 模块进行，确保数据一致性，并通过日志模块记录操作历史。